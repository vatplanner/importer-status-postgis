#########################
## Database connection ##
#########################

database.host=localhost
database.port=5432
database.username=configureMe
database.password=configureMe
database.dbname=configureMe
database.schema=public
#database.unixSocketPath=/var/run/postgresql/.s.PGSQL.5432


##############################
## AMQP/RabbitMQ connection ##
##############################

archive.amqp.host=localhost
archive.amqp.port=5672
archive.amqp.username=configureMe
archive.amqp.password=configureMe
archive.amqp.virtualHost=/

archive.requests.exchange=rawDataArchiveRequests


#######################
## Import parameters ##
#######################

# maximum number of data files to be returned from raw archive per request
import.maxFilesPerChunk=200

# maximum number of data files before import should clear memory
import.maxFilesBeforeRestart=1500

# Permit to start a full import on an empty database?
# CAUTION: This option should be kept disabled except for the very first import
#          or if database has been cleared on purpose. Please reset to false
#          immediately after first chunk has successfully been imported.
import.allowEmptyDatabase=false

# earliest ISO timestamp (when data was fetched) to start importing from in case
# of an empty database, if such import is permitted
import.emptyDatabaseEarliestFetchTime=1970-01-01T00:00:00Z


#####################
## Memory watchdog ##
#####################

# Memory watchdog kills the application when used allocated memory outgrows
# allowed maximum since start of application before. This is done to prevent
# slow-downs due to garbage collector running berzerk before ultimately hitting
# an OOM condition. Application is terminated with specific exit code which can
# be easily detected by an outside script to immediately restart the import
# which will continue in the same way as if restarted internally.
# Memory limits are only checked before each internal import restart as
# configured through import.maxFilesBeforeRestart option immediately after a
# forced GC run.

# Application is terminated in case that used memory exceeds either
# ... in percent
memory.maxPercentageIncreaseSinceFirstImport=200

# ... in megabytes
memory.maxAbsoluteIncreaseSinceFirstImportMegaBytes=500

# exit code to use if watchdog terminates the application and immediate restart
# is recommended
memory.exitCode = 10
